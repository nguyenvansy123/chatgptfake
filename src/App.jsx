import { useState, useRef, useEffect } from "react";
import "./App.css";
import ReactMarkdown from "react-markdown";

function App() {
  const [message, setMessage] = useState("");
  const [chats, setChats] = useState([
    {
      role: "assistant",
      content: `
Xin ch√†o üëã, t√¥i l√† **tr·ª£ l√Ω ph√°t tri·ªÉn khoa h·ªçc v√† ƒë·ªïi m·ªõi s√°ng t·∫°o** c·ªßa BV RƒÉng H√†m M·∫∑t TPHCM.  
B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ quy tr√¨nh nghi√™n c·ª©u khoa h·ªçc, s√°ng ki·∫øn c·∫£i ti·∫øn v√† x√©t duy·ªát y ƒë·ª©c.

**M·ªôt s·ªë g·ª£i √Ω ƒë·ªÉ b·∫Øt ƒë·∫ßu:**
- "Quy tr√¨nh n·ªôp ƒë·ªÅ t√†i nghi√™n c·ª©u nh∆∞ th·∫ø n√†o?"
- "C·∫ßn bi·ªÉu m·∫´u g√¨ khi ƒëƒÉng k√Ω s√°ng ki·∫øn?"
`,
    },
  ]);
  const [isTyping, setIsTyping] = useState(true);

  const chatHistoryRef = useRef(null);

  useEffect(() => {
    if (chatHistoryRef.current) {
      chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;
    }
  }, [chats, isTyping]);

  // H√†m typing t·ª´ng k√Ω t·ª±
  const typeReply = (text, msgs) => {
    let index = 0;
    const newMsg = { role: "assistant", content: "" };
    msgs.push(newMsg);
    setChats([...msgs]);

    const interval = setInterval(() => {
      if (index < text.length) {
        newMsg.content += text[index];
        setChats([...msgs]);
        index++;
      } else {
        clearInterval(interval);
        setIsTyping(false);
      }
    }, 30); // t·ªëc ƒë·ªô hi·ªÉn th·ªã (ms/char)
  };

  const chat = async (e, message) => {
    e.preventDefault();
    if (!message) return;

    setIsTyping(true);

    let msgs = [...chats, { role: "user", content: message }];
    setChats(msgs);
    setMessage("");

    try {
      const res = await fetch("https://api.openai.com/v1/responses", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: "gpt-5",
          input: [
            {
              role: "system",
              content:
                "B·∫°n l√† chuy√™n vi√™n qu·∫£n l√Ω nghi√™n c·ª©u khoa h·ªçc BV RƒÉng H√†m M·∫∑t TPHCM. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.",
            },
            {
              role: "system",
              content:
                "N·∫øu ng∆∞·ªùi d√πng h·ªèi c√¢u kh√¥ng li√™n quan th√¨ tr·∫£ l·ªùi: B·∫°n c√≥ c√¢u h·ªèi g√¨ v·ªÅ quy tr√¨nh nghi√™n c·ª©u khoa h·ªçc, s√°ng ki·∫øn c·∫£i ti·∫øn v√† x√©t duy·ªát y ƒë·ª©c c·ªßa BV RƒÉng H√†m M·∫∑t TPHCM?",
            },
            {
              role: "system",
              content:
                "Ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n t√†i li·ªáu n·ªôi b·ªô c·ªßa BV RƒÉng H√†m M·∫∑t TPHCM. N·∫øu kh√¥ng c√≥ trong t√†i li·ªáu th√¨ tr·∫£ l·ªùi r·∫±ng t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.",
            },
            { role: "user", content: message },
          ],
          tools: [
            {
              type: "file_search",
              vector_store_ids: ["vs_68c2368283788191b4eeabe7c26b40d3"],
            },
          ],
        }),
      });

      const data = await res.json();
      console.log("API response:", data);

      const assistantMessage = data.output.find(
        (item) => item.type === "message" && item.role === "assistant"
      );

      let reply = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.";
      if (assistantMessage?.content?.[0]?.text) {
        reply = assistantMessage.content[0].text;
      }

      // G·ªçi typing effect thay v√¨ push th·∫≥ng
      typeReply(reply, msgs);
    } catch (err) {
      console.error(err);
      setIsTyping(false);
    }
  };

  return (
    <main className="chat-container">
      <h1 className="chat-title">
        QUY TR√åNH NGHI√äN C·ª®U KHOA H·ªåC V√Ä S√ÅNG KI·∫æN C·∫¢I TI·∫æN
        <br />
        <span className="subtitle">B·ªÜNH VI·ªÜN RƒÇNG H√ÄM M·∫∂T TPHCM</span>
      </h1>

      <section className="chat-history" ref={chatHistoryRef}>
        {chats.map((chat, index) => (
          <div
            key={index}
            className={`chat-bubble ${chat.role === "user" ? "user" : "assistant"
              }`}
          >
            <span className="chat-role">
              {chat.role === "user" ? "B·∫°n" : "P.KHTH"}:
            </span>
            <ReactMarkdown className="chat-content">
              {chat.content}
            </ReactMarkdown>
          </div>
        ))}
      </section>

      {isTyping && (
        <div className="typing-indicator">
          <span className="dot"></span>
          <span className="dot"></span>
          <span className="dot"></span>
        </div>
      )}

      <form className="chat-form" onSubmit={(e) => chat(e, message)}>
        <input
          type="text"
          value={message}
          className="chat-input"
          placeholder="Nh·∫≠p c√¢u h·ªèi v√† nh·∫•n Enter..."
          onChange={(e) => setMessage(e.target.value)}
          autoFocus
          disabled={isTyping}
        />
        <button type="submit" className="send-btn" disabled={isTyping}>
          G·ª≠i
        </button>
      </form>
    </main>
  );
}

export default App;
